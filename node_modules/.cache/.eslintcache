[{"/Users/harryedwards/Work/FL/_examples/mapping/src/index.tsx":"1","/Users/harryedwards/Work/FL/_examples/mapping/src/MapApp.tsx":"2","/Users/harryedwards/Work/FL/_examples/mapping/src/MapApp.styles.tsx":"3","/Users/harryedwards/Work/FL/_examples/mapping/src/data/getData.ts":"4","/Users/harryedwards/Work/FL/_examples/mapping/src/reducers/mapReducer.ts":"5","/Users/harryedwards/Work/FL/_examples/mapping/src/components/MapContainer.tsx":"6","/Users/harryedwards/Work/FL/_examples/mapping/src/hooks/updateActiveCategories.ts":"7","/Users/harryedwards/Work/FL/_examples/mapping/src/components/Map.tsx":"8","/Users/harryedwards/Work/FL/_examples/mapping/src/components/MapContainer.styles.tsx":"9","/Users/harryedwards/Work/FL/_examples/mapping/src/utils/types.ts":"10","/Users/harryedwards/Work/FL/_examples/mapping/src/ui/Loading.tsx":"11","/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/MapFilters.tsx":"12","/Users/harryedwards/Work/FL/_examples/mapping/src/helpers/index.ts":"13","/Users/harryedwards/Work/FL/_examples/mapping/src/data/chilternsAonbArea.ts":"14","/Users/harryedwards/Work/FL/_examples/mapping/src/components/Map.styles.tsx":"15","/Users/harryedwards/Work/FL/_examples/mapping/src/components/routes/Routes.tsx":"16","/Users/harryedwards/Work/FL/_examples/mapping/src/components/markers/Markers.tsx":"17","/Users/harryedwards/Work/FL/_examples/mapping/src/ui/Button.tsx":"18","/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/MarkerCategories.tsx":"19","/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/MapFilters.styles.tsx":"20","/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/RouteCategoryFilters.tsx":"21","/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/CategoryFitlers.styles.tsx":"22","/Users/harryedwards/Work/FL/_examples/mapping/src/hooks/useFilters.ts":"23","/Users/harryedwards/Work/FL/_examples/mapping/src/data/markerIcons.ts":"24","/Users/harryedwards/Work/FL/_examples/mapping/src/components/PopupWrapper.tsx":"25","/Users/harryedwards/Work/FL/_examples/mapping/src/components/routes/Route.tsx":"26","/Users/harryedwards/Work/FL/_examples/mapping/src/ui/Button.styles.tsx":"27","/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/MarkerCategory.tsx":"28","/Users/harryedwards/Work/FL/_examples/mapping/src/helpers/headerScroll.ts":"29","/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoWindow/InfoWindow.tsx":"30","/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoWindow/InfoWindow.styles.tsx":"31","/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoBar/InfoBarContainer.tsx":"32","/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoBar/InfoBar.tsx":"33","/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoBar/infoBarContainer.styles.tsx":"34","/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoBar/InfoBar.styles.tsx":"35","/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoBar/InfoBarContainer.styles.tsx":"36"},{"size":616,"mtime":1652885508877,"results":"37","hashOfConfig":"38"},{"size":1135,"mtime":1652885512914,"results":"39","hashOfConfig":"38"},{"size":819,"mtime":1652888267946,"results":"40","hashOfConfig":"38"},{"size":6634,"mtime":1652885328254,"results":"41","hashOfConfig":"38"},{"size":2494,"mtime":1641397681008,"results":"42","hashOfConfig":"38"},{"size":1673,"mtime":1652888595142,"results":"43","hashOfConfig":"38"},{"size":507,"mtime":1652881420261,"results":"44","hashOfConfig":"38"},{"size":3680,"mtime":1652885048262,"results":"45","hashOfConfig":"38"},{"size":1015,"mtime":1652888580560,"results":"46","hashOfConfig":"38"},{"size":1963,"mtime":1652884635896,"results":"47","hashOfConfig":"38"},{"size":397,"mtime":1652881381737,"results":"48","hashOfConfig":"38"},{"size":1866,"mtime":1652883862341,"results":"49","hashOfConfig":"38"},{"size":955,"mtime":1652887672499,"results":"50","hashOfConfig":"38"},{"size":15337,"mtime":1615372644000,"results":"51","hashOfConfig":"38"},{"size":288,"mtime":1639519893993,"results":"52","hashOfConfig":"38"},{"size":604,"mtime":1652884659525,"results":"53","hashOfConfig":"38"},{"size":1752,"mtime":1652884882202,"results":"54","hashOfConfig":"38"},{"size":582,"mtime":1652881401517,"results":"55","hashOfConfig":"38"},{"size":536,"mtime":1652882119750,"results":"56","hashOfConfig":"38"},{"size":895,"mtime":1652888299046,"results":"57","hashOfConfig":"38"},{"size":2355,"mtime":1652884199081,"results":"58","hashOfConfig":"38"},{"size":2545,"mtime":1652888287823,"results":"59","hashOfConfig":"38"},{"size":467,"mtime":1652881458966,"results":"60","hashOfConfig":"38"},{"size":291,"mtime":1639562928516,"results":"61","hashOfConfig":"38"},{"size":1160,"mtime":1652881732746,"results":"62","hashOfConfig":"38"},{"size":1403,"mtime":1652884648358,"results":"63","hashOfConfig":"38"},{"size":409,"mtime":1615371589000,"results":"64","hashOfConfig":"38"},{"size":5868,"mtime":1652888502761,"results":"65","hashOfConfig":"38"},{"size":302,"mtime":1652881521126,"results":"66","hashOfConfig":"38"},{"size":895,"mtime":1652881990725,"results":"67","hashOfConfig":"38"},{"size":520,"mtime":1615371678000,"results":"68","hashOfConfig":"38"},{"size":912,"mtime":1652883671362,"results":"69","hashOfConfig":"38"},{"size":5999,"mtime":1652883840066,"results":"70","hashOfConfig":"38"},{"size":490,"mtime":1652883615777,"results":"71","hashOfConfig":"38"},{"size":1347,"mtime":1641548017545,"results":"72","hashOfConfig":"38"},{"size":490,"mtime":1652883615777,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"166fyvb",{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"77"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"/Users/harryedwards/Work/FL/_examples/mapping/src/index.tsx",[],[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/MapApp.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/MapApp.styles.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/data/getData.ts",["185","186"],[],"import { baseUrl } from '../helpers'\nimport { AppState, StateAction } from '../utils/types'\nimport { LinkEntity, TaxonomyEntity } from '../utils/types'\n\n// type Props = {\n//   categories: string\n// }\n\ninterface MapEntityRaw {\n  summary?: string | null\n  content?: string | null\n  distance?: string | null\n  postcode?: string | null\n  accessibility_terrain_walk_info?: string | null\n  facilities_accessibility?: string | null\n  id?: number | null\n  title?: string | null\n  image?: boolean | null\n  imageAlt?: boolean | null\n  categories?: TaxonomyEntity[] | null\n  links?: LinkEntity[] | null\n  download?: string | null\n}\n\ninterface MarkerRaw extends MapEntityRaw {\n  lat?: string | null\n  lng?: string | null\n}\ninterface RouteRaw extends MapEntityRaw {\n  shape_file: string\n}\n\nexport default async function getData(\n  dispatch: React.Dispatch<StateAction>,\n  categories: string,\n  routes: string\n) {\n  const filteredMarkersApi = `${baseUrl}/markers/${categories}`\n  const filteredRoutesApi = `${baseUrl}/routes/${routes}`\n\n  const getMarkers = fetch(filteredMarkersApi)\n    .then(blob => blob.json())\n    .then(data => {\n      // Add data to markers array.\n      const markerData = Object.values(data)\n\n      // Get marker data\n      const mapMarkers = markerData.map((marker: any) => {\n        const markerCategories = marker.categories?.map(\n          (category: TaxonomyEntity) => {\n            return category.tid\n          }\n        )\n\n        return {\n          lat: marker.lat,\n          lng: marker.lng,\n          position: [parseFloat(marker?.lat), parseFloat(marker.lng)],\n          summary: marker.summary,\n          content: marker.content,\n          distance: marker.distance,\n          postcode: marker.postcode,\n          accessibility_terrain_walk_info:\n            marker.accessibility_terrain_walk_info,\n          facilities_accessibility: marker.facilities_accessibility,\n          id: marker.id,\n          title: marker.title,\n          image: marker.image,\n          imageAlt: marker.imageAlt,\n          categories: markerCategories,\n          links: marker.links,\n          download: marker.download,\n        }\n      })\n\n      // Get taxo data\n      // Get user provided term IDs and convert to array of tid ints\n      const chosenCategories = categories.split(',').map(tid => +tid)\n\n      const mapCategoryParents = markerData\n        .map((marker: any) => {\n          return marker.categories.filter((term: any) => term.parent === 0)\n        })\n        .flat()\n        // Remove duplicates\n        .filter(\n          (termToCheck: TaxonomyEntity, i: number, terms: TaxonomyEntity[]) =>\n            terms.findIndex(\n              (term: TaxonomyEntity) => term.tid === termToCheck.tid\n            ) === i\n        )\n        // Only add user chosen categories to array\n        .filter((parentCat: TaxonomyEntity) =>\n          chosenCategories.includes(parentCat.tid)\n        )\n\n      // Combine parent & child categories to form filters, removing any that aren't in the list provided by the user\n      const categoryData = mapCategoryParents\n        // Find child terms & add to parent term object\n        .map((category: TaxonomyEntity) => {\n          const childTerms = markerData\n            .map((marker: any) => {\n              return marker.categories.filter(\n                (term: TaxonomyEntity) => term.parent !== 0\n              )\n            })\n            .flat()\n            // Remove duplicates\n            .filter(\n              (\n                termToCheck: TaxonomyEntity,\n                i: number,\n                terms: TaxonomyEntity[]\n              ) =>\n                terms.findIndex(\n                  (term: TaxonomyEntity) => term.tid === termToCheck.tid\n                ) === i\n            )\n            // Filter to children of the parent term\n            .filter(\n              (childTerm: TaxonomyEntity) => category.tid === childTerm.parent\n            )\n\n          return {\n            ...category,\n            children: childTerms,\n          }\n        })\n\n      dispatch({ type: AppState.SET_DATA, mode: mapMarkers })\n      dispatch({ type: AppState.SET_CATEGORIES, mode: categoryData })\n    })\n    .catch(err => {\n      dispatch({ type: AppState.ERROR, mode: true })\n      throw Error(err)\n    })\n\n  let getRoutes\n\n  if (routes) {\n    getRoutes = fetch(filteredRoutesApi)\n      .then(blob => blob.json())\n      .then(data => {\n        // Add data to routes array.\n        const routeData = Object.values(data)\n\n        // Get route data\n        const mapRoutes = routeData.map((route: any) => {\n          const routeCategories = route.categories?.map(\n            (category: TaxonomyEntity) => {\n              return category.tid\n            }\n          )\n\n          return {\n            shape_file: route.shape_file,\n            summary: route.summary,\n            content: route.content,\n            distance: route.distance,\n            postcode: route.postcode,\n            accessibility_terrain_walk_info:\n              route.accessibility_terrain_walk_info,\n            facilities_accessibility: route.facilities_accessibility,\n            id: route.id,\n            title: route.title,\n            image: route.image,\n            imageAlt: route.imageAlt,\n            categories: routeCategories,\n            links: route.links,\n            download: route.download,\n          }\n        })\n\n        // Get taxo data\n        const chosenCategories = routes.split(',').map(tid => +tid)\n\n        const categoryData = routeData\n          .map((route: any) => {\n            return route.categories.filter(\n              (term: TaxonomyEntity) => term.parent === 0\n            )\n          })\n          .flat()\n          // Remove duplicates\n          .filter(\n            (termToCheck: TaxonomyEntity, i: number, terms: TaxonomyEntity[]) =>\n              terms.findIndex(\n                (term: TaxonomyEntity) => term.tid === termToCheck.tid\n              ) === i\n          )\n          // Only add user chosen categories to array\n          .filter((parentCat: TaxonomyEntity) =>\n            chosenCategories.includes(parentCat.tid)\n          )\n\n        dispatch({ type: AppState.SET_ROUTES, mode: mapRoutes })\n        dispatch({ type: AppState.SET_ROUTE_CATEGORIES, mode: categoryData })\n      })\n      .catch(err => {\n        dispatch({ type: AppState.ERROR, mode: true })\n        throw Error(err)\n      })\n  }\n\n  await Promise.all([await getMarkers, routes ? await getRoutes : null])\n    .then(() => {\n      dispatch({ type: AppState.IS_LOADING, mode: false })\n    })\n    .catch(err => {\n      dispatch({ type: AppState.ERROR, mode: true })\n      throw Error(err)\n    })\n}\n","/Users/harryedwards/Work/FL/_examples/mapping/src/reducers/mapReducer.ts",["187"],[],"import { Reducer } from 'react'\nimport updateActiveCategories from '../hooks/updateActiveCategories'\nimport { AppState, StateAction, State } from '../utils/types'\n\n// Basic state setup\nexport const initialState: State = {\n  loading: true,\n  error: false,\n  markerData: [],\n  routeData: [],\n  categoryData: [],\n  routeCategoryData: [],\n  activeMarkerFilters: [],\n  activeRouteFilters: [],\n  showAonbArea: false,\n  infoBarContent: null,\n  mapRef: null,\n  containerRef: null,\n}\n\n/**\n * What's on reducer to manage state\n */\nexport default function mapReducer<R extends Reducer<State, StateAction>>(\n  state: State,\n  action: StateAction\n) {\n  switch (action.type) {\n    case AppState.IS_LOADING:\n      return {\n        ...state,\n        loading: action.mode,\n      }\n    case AppState.ERROR:\n      return {\n        ...state,\n        error: action.mode,\n      }\n    case AppState.SET_DATA:\n      return {\n        ...state,\n        markerData: action.mode,\n      }\n    case AppState.SET_ROUTES:\n      return {\n        ...state,\n        routeData: action.mode,\n      }\n    case AppState.SET_CATEGORIES:\n      return {\n        ...state,\n        categoryData: action.mode,\n      }\n    case AppState.SET_ROUTE_CATEGORIES:\n      return {\n        ...state,\n        routeCategoryData: action.mode,\n      }\n    case AppState.SHOW_ALL:\n      return {\n        ...state,\n        activeMarkerFilters: initialState.activeMarkerFilters,\n        activeRouteFilters: initialState.activeRouteFilters,\n      }\n    case AppState.ACTIVE_MARKER_CATEGORIES:\n      return {\n        ...state,\n        activeMarkerFilters: updateActiveCategories(\n          action.mode,\n          state.activeMarkerFilters,\n          state.mapRef\n        ),\n        infoBarContent: null,\n      }\n    case AppState.ACTIVE_ROUTE_CATEGORIES:\n      return {\n        ...state,\n        activeRouteFilters: updateActiveCategories(\n          action.mode,\n          state.activeRouteFilters,\n          state.mapRef\n        ),\n        infoBarContent: null,\n      }\n    case AppState.SHOW_AONB_AREA:\n      return {\n        ...state,\n        showAonbArea: action.mode,\n      }\n    case AppState.SHOW_INFO_BAR:\n      return {\n        ...state,\n        infoBarContent: action.mode,\n      }\n    case AppState.MAP_REF:\n      return {\n        ...state,\n        mapRef: action.mode,\n      }\n    case AppState.CONTAINER_REF:\n      return {\n        ...state,\n        containerRef: action.mode,\n      }\n    default:\n      throw new Error('Unknown action')\n  }\n}\n","/Users/harryedwards/Work/FL/_examples/mapping/src/components/MapContainer.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/hooks/updateActiveCategories.ts",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/Map.tsx",[],["188","189","190","191"],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/MapContainer.styles.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/utils/types.ts",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/ui/Loading.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/MapFilters.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/helpers/index.ts",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/data/chilternsAonbArea.ts",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/Map.styles.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/routes/Routes.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/markers/Markers.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/ui/Button.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/MarkerCategories.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/MapFilters.styles.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/RouteCategoryFilters.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/CategoryFitlers.styles.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/hooks/useFilters.ts",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/data/markerIcons.ts",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/PopupWrapper.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/routes/Route.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/ui/Button.styles.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/filters/MarkerCategory.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/helpers/headerScroll.ts",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoWindow/InfoWindow.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoWindow/InfoWindow.styles.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoBar/InfoBarContainer.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoBar/InfoBar.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoBar/infoBarContainer.styles.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoBar/InfoBar.styles.tsx",[],[],"/Users/harryedwards/Work/FL/_examples/mapping/src/components/infoBar/InfoBarContainer.styles.tsx",[],[],{"ruleId":"192","severity":1,"message":"193","line":25,"column":11,"nodeType":"194","messageId":"195","endLine":25,"endColumn":20},{"ruleId":"192","severity":1,"message":"196","line":29,"column":11,"nodeType":"194","messageId":"195","endLine":29,"endColumn":19},{"ruleId":"192","severity":1,"message":"197","line":24,"column":36,"nodeType":"194","messageId":"195","endLine":24,"endColumn":37},{"ruleId":"198","severity":2,"message":"199","line":26,"column":21,"nodeType":"194","endLine":26,"endColumn":31,"suppressions":"200"},{"ruleId":"198","severity":2,"message":"201","line":64,"column":17,"nodeType":"194","endLine":64,"endColumn":23,"suppressions":"202"},{"ruleId":"192","severity":1,"message":"203","line":82,"column":13,"nodeType":"194","messageId":"195","endLine":82,"endColumn":22,"suppressions":"204"},{"ruleId":"198","severity":2,"message":"205","line":82,"column":25,"nodeType":"194","endLine":82,"endColumn":32,"suppressions":"206"},"@typescript-eslint/no-unused-vars","'MarkerRaw' is defined but never used.","Identifier","unusedVar","'RouteRaw' is defined but never used.","'R' is defined but never used.","react-hooks/rules-of-hooks","React Hook \"useContext\" is called in function \"map\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",["207"],"React Hook \"useMap\" is called conditionally. React Hooks must be called in the exact same order in every component render.",["208"],"'mapBounds' is assigned a value but never used.",["209"],"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render.",["210"],{"kind":"211","justification":"212"},{"kind":"211","justification":"212"},{"kind":"211","justification":"213"},{"kind":"211","justification":"213"},"directive","","map.fitBounds needs to be used"]