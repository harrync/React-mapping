{"ast":null,"code":"var _jsxFileName = \"/Users/harryedwards/Work/FL/_examples/mapping/src/components/routes/Route.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from 'react';\nimport { GeoJSON, Tooltip } from 'react-leaflet';\nimport PopupWrapper from '../PopupWrapper';\nimport { htmlDecode } from '../../helpers';\nimport { StateContext } from '../../MapApp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/**\n * Route map element\n */\nexport default function Route(_ref) {\n  _s();\n\n  let {\n    route\n  } = _ref;\n  const {\n    state\n  } = useContext(StateContext);\n  const {\n    routeCategoryData\n  } = state;\n  const [routeData, setRouteData] = useState(null); // Get data from shape file, convert to geoJSON object\n\n  useEffect(() => {\n    fetch(route.shape_file).then(blob => blob.json()).then(data => {\n      setRouteData(data);\n    }).catch(err => {\n      throw Error(err);\n    });\n  }, []);\n\n  if (routeData) {\n    const routeColour = routeCategoryData.filter(category => category.tid === route.categories[0]);\n    return /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: routeData,\n      pathOptions: {\n        color: routeColour[0].route_colour,\n        weight: 5,\n        stroke: true\n      },\n      children: [/*#__PURE__*/_jsxDEV(PopupWrapper, {\n        infoContent: route\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        sticky: true,\n        children: htmlDecode(route.title)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, route.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(Route, \"gleWluA+0VHPK5Ew+C13W8HUlSk=\");\n\n_c = Route;\n\nvar _c;\n\n$RefreshReg$(_c, \"Route\");","map":{"version":3,"names":["useContext","useEffect","useState","GeoJSON","Tooltip","PopupWrapper","htmlDecode","StateContext","Route","route","state","routeCategoryData","routeData","setRouteData","fetch","shape_file","then","blob","json","data","catch","err","Error","routeColour","filter","category","tid","categories","color","route_colour","weight","stroke","title","id"],"sources":["/Users/harryedwards/Work/FL/_examples/mapping/src/components/routes/Route.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from 'react'\nimport { GeoJsonObject } from 'geojson'\nimport { GeoJSON, Tooltip } from 'react-leaflet'\nimport { RouteEntity, StateContextT } from '../../utils/types'\nimport PopupWrapper from '../PopupWrapper'\nimport { htmlDecode } from '../../helpers'\nimport { StateContext } from '../../MapApp'\n\ntype Props = {\n  route: RouteEntity\n}\n\n/**\n * Route map element\n */\nexport default function Route({ route }: Props) {\n  const { state } = useContext(StateContext) as StateContextT\n  const { routeCategoryData } = state\n  const [routeData, setRouteData] = useState(null)\n\n  // Get data from shape file, convert to geoJSON object\n  useEffect(() => {\n    fetch(route.shape_file)\n      .then(blob => blob.json())\n      .then(data => {\n        setRouteData(data)\n      })\n      .catch(err => {\n        throw Error(err)\n      })\n  }, [])\n\n  if (routeData) {\n    const routeColour = routeCategoryData.filter(\n      category => category.tid === route.categories[0]\n    )\n\n    return (\n      <GeoJSON\n        key={route.id}\n        data={routeData as GeoJsonObject}\n        pathOptions={{\n          color: routeColour[0].route_colour,\n          weight: 5,\n          stroke: true,\n        }}\n      >\n        <PopupWrapper infoContent={route} />\n        <Tooltip sticky={true}>{htmlDecode(route.title)}</Tooltip>\n      </GeoJSON>\n    )\n  }\n\n  return <></>\n}\n"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AAEA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,eAAjC;AAEA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,cAA7B;;;;AAMA;AACA;AACA;AACA,eAAe,SAASC,KAAT,OAAiC;EAAA;;EAAA,IAAlB;IAAEC;EAAF,CAAkB;EAC9C,MAAM;IAAEC;EAAF,IAAYV,UAAU,CAACO,YAAD,CAA5B;EACA,MAAM;IAAEI;EAAF,IAAwBD,KAA9B;EACA,MAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C,CAH8C,CAK9C;;EACAD,SAAS,CAAC,MAAM;IACda,KAAK,CAACL,KAAK,CAACM,UAAP,CAAL,CACGC,IADH,CACQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADhB,EAEGF,IAFH,CAEQG,IAAI,IAAI;MACZN,YAAY,CAACM,IAAD,CAAZ;IACD,CAJH,EAKGC,KALH,CAKSC,GAAG,IAAI;MACZ,MAAMC,KAAK,CAACD,GAAD,CAAX;IACD,CAPH;EAQD,CATQ,EASN,EATM,CAAT;;EAWA,IAAIT,SAAJ,EAAe;IACb,MAAMW,WAAW,GAAGZ,iBAAiB,CAACa,MAAlB,CAClBC,QAAQ,IAAIA,QAAQ,CAACC,GAAT,KAAiBjB,KAAK,CAACkB,UAAN,CAAiB,CAAjB,CADX,CAApB;IAIA,oBACE,QAAC,OAAD;MAEE,IAAI,EAAEf,SAFR;MAGE,WAAW,EAAE;QACXgB,KAAK,EAAEL,WAAW,CAAC,CAAD,CAAX,CAAeM,YADX;QAEXC,MAAM,EAAE,CAFG;QAGXC,MAAM,EAAE;MAHG,CAHf;MAAA,wBASE,QAAC,YAAD;QAAc,WAAW,EAAEtB;MAA3B;QAAA;QAAA;QAAA;MAAA,QATF,eAUE,QAAC,OAAD;QAAS,MAAM,EAAE,IAAjB;QAAA,UAAwBH,UAAU,CAACG,KAAK,CAACuB,KAAP;MAAlC;QAAA;QAAA;QAAA;MAAA,QAVF;IAAA,GACOvB,KAAK,CAACwB,EADb;MAAA;MAAA;MAAA;IAAA,QADF;EAcD;;EAED,oBAAO,qCAAP;AACD;;GAvCuBzB,K;;KAAAA,K"},"metadata":{},"sourceType":"module"}